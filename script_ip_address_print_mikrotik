from netmiko import ConnectHandler
from netmiko.ssh_exception import NetMikoTimeoutException
from netmiko.ssh_exception import AuthenticationException
from tabulate import tabulate
from datetime import datetime
import getpass
from os import path
import re

device_types = {'mikrotik_routeros': '1', 'cisco_ios': '2', 'hp_procurve': '3'}

# Function for connecting to equipment via ssh: 
def connection(selected_device, host, username, password):

    device = {
        'device_type': selected_device,
        'host': host,
        'username': username,
        'password': password,
        'port': '22',
        'global_cmd_verify': False,
    }
    # Check for errors when entering data: 
    try:
        connect_to_device = ConnectHandler(**device)
        return connect_to_device
    except NetMikoTimeoutException: # Checking for an error with an incorrectly entered ip
        return 'FalseIP'
    except AuthenticationException: # Check for an error of an incorrectly entered username or password
        return 'FalseLogPass'


# Function for finding and returning the type of equipment (key) according to the selected number (value). For example, you entered the number 1, so the value "mikrotik_routeros" will be returned
def search_device_type(selected_device, device_types):
    selected_device_type = list(device_types.keys())[list(device_types.values()).index(selected_device)]
    return selected_device_type

# Function for entering ip:
def input_ip():
    ip = input('Enter the ip to find: ')
    return ip

# Function for checking ip for correctness of the entered data:
def check_ip(ip):
    check = re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip) # Checks how many digits are in an octet: must be from 1 to 3 digits
    return check

# Function for finding ip in the "output" variable (it contains the output of the "ip address print" command):
def find_ip(ip):
    check_ip(ip)
    find_ip = output.find(str(ip)) find_ip = output.find (str (ip)) # If "find" does not find the desired value, it will return "-1", and if found, it will return some positive number, so I just check for equality with "-1
    if find_ip != -1:
        return 'IP address found'
    else:
        return 'IP address not found'

# Function for writing a header to a file:
def file_header():
    writing = open('find_ip.csv', 'a')
    writing.write('Search date' + ',' + 'Desired ip' + ',' + ' Is it found' + ',' + 'ip equipment' + ',' + 'Type of equipment' + '\n')
    writing.close()
    return None
    
# Function for writing data to csv file:
def writing_to_file(ip, result_find_ip, selected_device, host):
    now = datetime.now().strftime("%d-%m-%Y %H:%M")
    if path.exists('find_ip.csv') is False: # This condition checks the existence of the file and if it does not exist, adds the file header
        file_header()
    else:
        pass
    writing = open('find_ip.csv', 'a')
    writing.write(now + ',' + ip + ',' + result_find_ip + ',' + host + ',' + selected_device + '\n')
    writing.close()
    return None


# Output selection of equipment type in the form of a table
print(tabulate(device_types.items(), headers=['Equipment type', 'Select'], tablefmt="grid"))

# Select the type of device:
selected_device = search_device_type(input('Select a device: '), device_types)

# The connection to the equipment is made and the "ip address print" command is executed, the output is also written to the "output" variable:
while True: # the loop is needed to make it possible to enter the connection data again when an error occurs
    # Entering data for connecting to equipment:
    host = str(input('ip of equipment: '))
    username = str(input('login: '))
    password = getpass.getpass('password:')  # for security purposes, the entered password will not be reflected in the console
    if connection(selected_device, host, username, password)=='FalseIP':# Check for an error with an incorrectly entered ip (based on the return value of the connection () function)
        print('Incorrect data entered (equipment ip)')
    elif connection(selected_device, host, username, password)=='FalseLogPass':# Checking for an error of an incorrectly entered username or password (based on the returned value by the connection () function)
        print('Incorrect data entered (login or password)')
    # If connection() did not return 'FalseIP' or 'FalseLogPass', then there is a connection and you can send a command:
    else:
        output = connection(selected_device, host, username, password).send_command('ip address print')
        print(output)
        break

# Input and check for correctness of ip, which must be found in the output of the "ip address print" command (the loop will be interrupted if the check_ip () function returns not None:
while True:
    ip = input_ip() # Enter ip using the input_ip () function
    if check_ip(ip) is None: # check_ip (ip) - check if the entered ip is correct
        print('Invalid ip entered, please try again.')
    else:
        break
        
# Find the entered ip in the "ip address print" command output:
result_find_ip = find_ip(ip)
print(result_find_ip)

# Writing the ip search result to a file (the desired ip will also be written there, whether it was found or not, the type of equipment and its ip):
writing_to_file(ip, result_find_ip, selected_device, host)
